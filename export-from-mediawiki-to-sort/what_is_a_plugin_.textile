\nA “plugin” is a container for any kind of PHP code.

On the "admin-side":/home/www/zendstudio/dokuwiki/bin/doku.php?id=admin-side under "plugins":/home/www/zendstudio/dokuwiki/bin/doku.php?id=plugins you can click the _edit_ link for any listed plugin to see its code. Code can be a few lines of PHP, or _function_ and _class_ definitions.

Defining functions in the plugin is the most commonâ€”and easiestâ€”way when starting out, as they can then be called from templates. But more advanced ways for plugins to modify Textpattern behaviour exist. We can categorize plugins by how they offer their functionality roughly into 3 categories:

* “on demand” - providing tags for templates and forms
* “up front” - intercepting pagerequests (either all or those having special characteristics)
* “in between” - using txp-provided hooks to automatically change or add behaviour

This is just one of several possible ways to look at plugins.

Another aspect you will commonly find is the distinction between public-side and "admin-side":/home/www/zendstudio/dokuwiki/bin/doku.php?id=admin-side (and sometimes library) plugins. Admin-side plugins often (but not strictly) make use of the "extensions":/home/www/zendstudio/dokuwiki/bin/doku.php?id=extensions tab in Textpattern's interface. It is also fairly common for many practical plugins to “cross boundaries” and fall into several of the above categories at once, because a plugin is really nothing more than a container for code.

