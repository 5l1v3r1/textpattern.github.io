h1. Php

h2. Syntax

bc. <txp:php>

Textpattern's *php* tag is a _container_ tag that provides the same output abilities as @<?php //Code goes here... ?>@. Textpattern's tag version is used like this:

bc. <txp:php>
    // Code goes here...
</txp:php>

Control over where this tag is allowed to appear (i.e., the privileges required to allow it to appear in pages and forms) are governed by settings in the Preferences page.

h2. Attributes

This tag has no attributes.

h2. Notes on use

h3. Using PHP inside of an article

When inserting markup or PHP into the content boxes of a Textpattern article:

# Donâ€™t include the usual PHP delineations: i.e., @<?php ... ?>@.
# Use PHP as you would use normal PHP, not interspersed with markup. For example, inside the PHP tags, use PHP's echo command to output HTML, rather than writing HTML directly.
# Surround the code with both the special @<notextile>@ tag and Textpattern @<txp:php>@ tag to *disable Textile* parsing:

bc. <notextile>
    <txp:php>
        ...code goes here...
    </txp:php>
</notextile>

h3. Equivalent programmatic names

All Textpattern tags have equivalent programmatic names which are _exactly_ the same as the tag names. For example, @<txp:recent_articles />@ is @recent_articles()@.

h3. Arrays must be passed to all functions

You must pass an array to all tag functions, even if there are no attributes to set. For tags that require no attributes or those that you do not wish to modify the defaults, pass an empty array, e.g., @category1(array());@.

h2. Examples

h3. Example 1: Display PHP server library information

bc. <txp:php>
    phpinfo();
</txp:php>

h3. Example 2: Show the current linked category title

bc. <txp:php>
    echo "The current TXP category is: "
        .category(array(
            'title'   => '1',
            'link'    => '1',
            'wraptag' => 'div'
        ));
</txp:php>
