h1. Custom field

h2. Syntax

bc. <txp:custom_field />

The basic *custom_field* tag is a _single_ tag and used to display the contents of a custom field.

Custom fields are useful when you need to output content having a consistent structure, usually in context to a particular type of article. Custom fields are defined in [[Preferences page]], and used in the [[Write page]]. There are conditions to be aware of in each case, so be sure to read the following sections, respectively:

# [[Defining custom fields]]
# [[Adding custom field data]]

Also see the "if_custom_field":if-custom-field.textile conditional tag, which provides more flexibility and power using custom fields.

h2. Attributes

Tag will accept the following attributes (*case-sensitive*):

; [[default]]=&quot;value&quot;
: Default value to use when field is empty.
; [[escape]]=&quot;html&quot;
: Escape HTML entities such as @<@, @>@ and @&@ prior to echoing the field contents.
: Values: @html@ or unset.
: Default: @html@;
; [[name]]=&quot;fieldname&quot;
: Display specified custom field.

h2. Examples

h3. Example 1: Book reviews

You might, for example, publish book reviews (for which you add the author, the title of the book, the publishing company and the year of publication), with:

# a custom field named @Book_Author@ containing @J.R.R. Tolkien@,
# a custom field named @Book_Title@ containing @The Lord of the Rings@,
# a custom field named @Book_Publisher@ containing @HarperCollins@,
# a custom field named @Book_Year@ containing @2004@.

and an 'article' type form like the following:

bc. <p>
    <txp:custom_field name="Book_Author" />: <txp:custom_field name="Book_Title" /><br>
    Published by <txp:custom_field name="Book_Publisher" /> in <txp:custom_field name="Book_Year" />
</p>

HTML returned would be:

bc. <p>
    J.R.R. Tolkien: The Lord of the Rings<br>
    Published by HarperCollins in 2004.
</p>

h3. Example 2: Power A linklog

With an article title of @Textpattern@, an excerpt of @Textpattern is awesome!@, a custom field named @Link@ containing @http://textpattern.com/@, and an 'article' type form like the following:

bc. <article class="linklog-entry">
    <h1>
        <a href="<txp:custom_field name="Link" />"><txp:title /></a>
    </h1>
    <p>
        <time datetime="<txp:posted format="iso8601" />" itemprop="datePublished">
            <txp:posted format="%d %d %Y" />
        </time>
    </p>
    <txp:excerpt />
</article>

HTML returned would be:

bc. <article class="linklog-entry">
    <h1>
        <a href="http://textpattern.com/">Textpattern</a>
    </h1>
    <p>
        <time datetime="2005-08-14T15:08:12Z" itemprop="datePublished">14 Aug 2005</time>
    </p>
    <p>Textpattern is awesome!</p>
</article>

Other tags used: "title":title.textile, "posted":posted.textile, "excerpt":excerpt.textile.

h3. Example 3: Unescaping HTML output

With a custom field named @foo@ containing:

bc. <a href="../here/">

using the following:

bc. <txp:custom_field name="foo" />

will return this hunk of HTML:

bc. &amp;amp;#60;a href=&amp;amp;#34;../here/&amp;amp;#34;&amp;amp;#62;

whereas using:

bc. <txp:custom_field name="foo" escape="" />

will render the URL as you'd expect, exactly as written in the custom field itself. Thus, it will be rendered as a link by the browser.
