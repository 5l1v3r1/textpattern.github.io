---
layout: document
category: development
published: true
title: "Textpattern plugin development"
tags:
  - development 
  - plugins
---

h1. Textpattern plugin development

This information is for those who are thinking about developing Textpattern plugins.

On this page:

* "Disclaimer":#sec1
* "Developer rules of the road":#sec2
** "Avoid reinventing the wheel":#sec2-1
** "Do it the Textpattern way":#sec2-2
** "Use the templates":#sec2-3
** "Write clear and concise plugin help":#sec2-4
* "What is a plugin?":#sec3
** "Functional categories":#sec3-1
** "Public-side plugins":#sec3-2 (with tutorial)
** "Admin-side plugins":#sec3-3 (with tutorial)
* "Register your plugin developer prefix":#sec4
* "How plugins are loaded":#sec5
* "Function: @register_callback()@":#sec6
* "Callbacks":#sec7
** "Adding admin-side panel elements":#sec7-1
** "Altering admin-side panel elements":#sec7-2
** "Removing admin-side panel elements":#sec7-3
* "Plugin lifecycle management and preferences":#sec8
* "Variables, classes, and constants":#sec9
* "Implementation resources":#sec10
* "Getting help":#sec11
* "External reading":#sec12

h2(#sec1). Disclaimer

Before you embark on this journey, understand that core developers put a lot of effort into maintaining backwards compatibility within the development branch of Textpattern itself, but that does not guarantee your plugins will continue to work as intended after new versions of Textpattern are released. Sometimes new development directions -- like what might come as we head to version 4.6 and later -- require making changes that affect backwards compatibility. As a plugin developer, it is your responsibility to ensure your plugins work against core code at point of every future Textpattern release.

h2(#sec2). Developer rules of the road

More like four strong recommendations, to help ensure you're producing plugins that people will use. And that's the whole point, right?

h3(#sec2-1). Avoid reinventing the wheel 

While reinventing the wheel is a good way to learn, it's not so good for making useful or popular plugins. If you're plugin does what another plugin already does, few users will take the time to install and try it unless it's _extremely_ innovative in some way. We recommend that before you start developing, spend some time researching what plugins exist, what functionality they provide, and how well they're working for people (often indicated by how popular they are). 

Here's the visible approach to plugin conception that can help you make a good choice... 

When plugin ideas aren't conceived quietly in the minds of individuals and built to fruition without a lot of fanfare (a path usually taken when a developer needs the functionality regardless of whether the community does or not), they often begin as a core "feature idea":http://forum.textpattern.com/viewforum.php?id=2 ("a shunned one":http://docs.textpattern.io/development/plugin-vs-core), or "plugin discussion":http://forum.textpattern.com/viewforum.php?id=13. Bouncing plugin ideas off the community first is a good way to gauge whether a plugin idea has merit -- the more interest and constructive feedback you get, the more likely the plugin is worth building.

If you do throw caution to the wind and reinvent the wheel anyway, make sure you're ready to raise the bar. Somebody has to eventually. 

h3(#sec2-2). Do it the Textpattern way

Do it the “Textpattern's way” from the start by using Textpattern functions (talked about later), because they already work efficiently. Your goal should be to emulate Textpattern as you expand its capabilities, otherwise you run the risk of your plugin feeling foreign or out of place, and perhaps not working well with other plugins. Further, some functions are in place to assist with keeping Textpattern secure and working regardless of host server settings, and you don't want to interfere with that kind of thing.

h3(#sec2-3). Use the templates

Templates come from the trials and errors of those who came before you. Thus using templates helps you do things easier, with better results. There are two templates to be aware of and use: the _plugin development template_, and the _plugin user-help template and guidelines_.

**Plugin development template:**

* "Plugin template":https://github.com/textpattern/textpattern-plugin-template
* "Plugin template helper":http://docs.textpattern.io/development/plugin-template-help

**Plugin user-help template and guidelines:**

* "Plugin user-help template and guidelines":http://docs.textpattern.io/development/plugin-user-help-guidelines

h3(#sec2-4). Write clear and concise plugin help 

Yes, we're emphasising this. Don't be one of _those_ developers that assumes everyone knows what you know -- the opposite is true. People won't use your plugin (innovative or not) if you don't explain how. You can avoid fielding a lot of unnecessary questions in the support forum and empower users by producing good plugin user instructions to begin with. Use the template to ensure your plugin instructions are consistently structured and properly formatted. Here it is again:

* "Plugin user-help guidelines":http://docs.textpattern.io/development/plugin-user-help-guidelines

If you include screenshots in your plugin help, keep them updated with UI changes. Nothing looks worse or is more confusing than outdated screenshots that don't match the help copy.

h2(#sec3). What is a plugin?

This documentation focuses on the technological aspects of plugins, but you should also understand the "philosophy of core development":http://docs.textpattern.io/development/plugin-vs-core, as it relates to why few of the functional capabilities provided by plugins are ever integrated into core code.

In general, a "plugin" is a container for any kind of PHP code. The code can be a few lines of PHP, or _function_ and _class_ definitions.[1] Defining functions in the plugin is a common and easy way to start out, as they can be called from templates. But more advanced ways exist for plugins to influence Textpattern behaviour.

fn1. You can see the code for any installed plugin by clicking its name in the table on the **"Plugins":http://docs.textpattern.io/administration/admin/plugins-panel** panel, or by installing and using "ied_plugin_composer":http://textpattern.org/plugins/588/ied_plugin_composer.

h3(#sec3-1). Functional categories

Plugins can be categorised in three functional ways:

* “On demand” (providing tags for __pages__ and __forms__)
* “Up front” (intercepting page requests; either all or those having special characteristics)
* “In between” (using Textpattern hooks to automatically change or add behaviour)

The most practical (and most popular) plugins fall into more than one category, because a plugin is really nothing more than a container for code. If it provides functionality in multiple ways, it's likely providing more benefit to the user.

Plugins can also be public-side or admin-side, or be one of several types that correspond to all of the above (see __How plugins are loaded__ later.)

h3(#sec3-2). Public-side plugins

Public-side (aka "client-side" or "front-side") plugins are those that enable content output on the front-side of a website, often through specialised tags, which a website designer can use interchangeably with Textpattern's core tags and HTML. These kinds of plugins don't have much in the way of requirements, thus are great plugins to try building when getting started with Textpattern plugin development.

* "Public-side plugin tutorial":http://docs.textpattern.io/development/public-side-plugin-tutorial -- A basic tutorial to learn the ropes of the easiest kind of plugin to build.

h3(#sec3-3). Admin-side plugins

Admin-side plugins provide site administrators and designers the ability to alter the "admin-side":http://docs.textpattern.io/administration/ UI and/or functionality in some way. 

Admin-side plugins often make use of the **"Extensions":http://docs.textpattern.io/administration/extensions/** region. In other words, if an admin-side plugin is designed to provide a user with special preferences, search mechanisms, functional controls, and so forth, they would be made available on their own sub-panel under the Extensions region.

* "Admin-side plugin tutorial":http://docs.textpattern.io/development/admin-side-plugin-tutorial -- A basic tutorial to get acquainted with the tricker kinds of plugins to build.

h2(#sec4). Register your plugin developer prefix

All hopeful plugin developers must have a "plugin developer prefix":http://docs.textpattern.io/development/registered-textpattern-developer-prefixes.

When developing your plugins, you will apply your prefix in:

* The names of PHP classes, functions, and global variables in the plugin's code.
* The database table and indices names.
* The names of stored preferences in the @_txp_prefs_@ table and/or the @$prefs array;@.
* Any global JavaScript variables or function names you use for modifying the backend or adding features to the front-end.
* IDs and, to some extent, classes of HTML elements that you add to the backend interface.[2] 
* URL parameter names. Replace @?foo=bar&baz=1@ with @?abc_foo=bar&abc_baz=1@, where "@abc@" would be your own prefix.

fn2. The exception to this is if an element of your markup is logically similar to an already existing core element and you wish it to be styled in the same way by themes. Doing this saves theme designers from having to write specific rules to target your plugin's markup.

h2(#sec5). How plugins are loaded

Plugins are loaded very early during script execution. It happens in textpattern/publish.php (public-side) and in textpattern/index.php (admin-side). Look out for @load_plugins@ to see where it is happening.

By setting the plugin-type in your plugin you can control how a plugin will be loaded:

* A “*public*” plugin (0) will only be loaded on the public side.
* An “*admin + client*” plugin (1) will be loaded on both public _and_ the admin sides.
* A “*library*” plugin (2) will not automatically load, rather it loads when included/required by other plugins.
* An “*admin*” plugin (3) will only be loaded on the admin side and may _not_ make asynchronous calls.
* An “*admin + AJAX*” plugin (4) will only be loaded on the admin side and may make asynchronous calls.
* An “*admin + public + AJAX*” plugin (5) will be loaded on both the admin and public sides and may make asynchronous calls.

The code of the plugin is then @eval()@ 'ed (or included) within that @load_plugins()@ function, _not_ in the global scope. This means if you need to use global variables, you have to explicitly set them to be global. Functions and classes are always in the “global scope”, so there is no problem with that.

Understanding how plugins are loaded, also shows how you can write “on demand” and “up front” plugins, which were mentioned earlier. Defining a function will make it available as a tag in Textpattern __pages__ and __forms__. Whereas any code that is outside of any function/class definition will be executed right away. You can check for Request-Variables and initiate some action and @exit;@ the execution of the script (for example to serve images or other binary data from within a plugin).

h2(#sec6). Function: @register_callback()@

There are many "functions used in Textpattern":http://phpcrossref.com/xref/textpattern/_functions/ that may be relevant to your plugin development aims.[3] 

In particular, the @register_callback()@ function is important for writing "callbacks":#sec7 (especially admin-side callbacks).[4] This is the full function definition:

bc. function register_callback($func, $event, $step, $pre=0)

And the *arguments* (or parameters) are:

notextile. <div class="tabular-data" itemscope itemtype="http://schema.org/Table">

|_. Argument |_. Parameter |_. What it is/does |
| 1 | @$func@ | Name of the function you add to a callback event. |
| 2 | @$event@ | Name of the core _event_. |
| 3 | @$step@ (admin-side only) | Name of the associated core _step_. Not always required. |
| 4 | @$pre=@ (admin-side only) | Designates when @$func@ is called. Values are @0@ (default) or @1@. Not always required. |

notextile. </div> 

*Argument #3:* In these situations, the @$event@ (argument #2) is (disjunctively) divided into steps, with each @$step@ pinpointing a particular action or DOM location (e.g. a panel widget or one of its controls) in the admin-side. 

*Argument #4:* This argument determines when the function is called, with implications for what you can do:

* If @$pre=0@ (default), the function is called _after_ the main part of the page is executed and rendered, allowing your function to add things below it, or to manipulate the DOM. 
* If @$pre=1@, the funcntion is called _before_ any part of the page is rendered or executed, allowing you to replace existing panels on the admin-side.

fn3. As you learn about functions, be aware of the helper functions found in the __"/lib":https://github.com/textpattern/textpattern/tree/master/textpattern/lib__ folder. Some examples: The __"txplib_db.php":https://github.com/textpattern/textpattern/blob/master/textpattern/lib/txplib_db.php__ file for interacting with the Textpattern database; __"txplib_forms.php":https://github.com/textpattern/textpattern/blob/master/textpattern/lib/txplib_forms.php__ to help build different HTML form controls; __"txplib_html.php":https://github.com/textpattern/textpattern/blob/master/textpattern/lib/txplib_html.php__ to help build various other types of HTML elements; and __"txplib_misc.php":https://github.com/textpattern/textpattern/blob/master/textpattern/lib/txplib_misc.php__ to help build various “miscellaneous” functions.

fn4. Another function, @pluggable_ui()@, was introduced in 2009, which provided additional event/step hooks for the admin-side panels. But the admin-side template markup has since evolved, thus @pluggable_ui()@ no longer offers the value it once did. See "The pluggable_ui function":http://docs.textpattern.io/development/the-pluggable-ui-function for more.

h2(#sec7). Callbacks

A callback is essentially an instruction (written as a function) that your plugin follows to execute some _events_ (and _steps_) -- either @$event@ by itself or combined with a @$step@. You hook into these known points to choose where and when your plugins run. 

The *"Core callbacks reference":http://docs.textpattern.io/development/core-callbacks-reference* provides complete details for all callback actions used in Textpattern, organised by type and by where in Textpattern they are called from. The callbacks reference is organised by public-side, admin-side, plugin, and function- and tag-based callbacks.[5]

The @register_callback()@ function, described previously, is instrumental in writing callbacks, and especially for administration-related plugins. Let's put it all together with a few examples.

fn5. There's also the "Admin-side events and steps":http://docs.textpattern.io/development/admin-side-events-and-steps listing for admin-side plugins specifically. This would correspond with the various "admin-side callbacks":/core-callbacks-reference#sec2 in the __Core callbacks reference__, but it doesn't provide the explanatory details like the callbacks reference does.

h3(#sec7-1). Adding your own admin-side panel elements

Elements can be added to admin-side panels in two ways: as _new_ elements, or as modifications to existing elements. Each panel has its own set of core callback parameters to work with, which are detailed in the "Admin-side user-interface callbacks":http://docs.textpattern.io/development/core-callbacks-reference#sec2-4 section of the "Core callbacks reference":http://docs.textpattern.io/development/core-callbacks-reference.

h4(#sec7-1-1). Adding new elements (without altering existing markup)

In this example, we use the @register_callback@ function to add some text -- "Textile, the humane web text generator." -- in the **Write** panel's **Textile help** widget. The text is added immediately below the widget header link, which is where the @extend_col_1@ step happens to output its markup:

bc.. register_callback('abc_add_text', 'article_ui', 'extend_col_1');

function abc_add_text($event, $step, $data, $rs) {
   return 'Textile, the humane web text generator.';
}

p. From the @register_callback@ definition provided earlier, we see the first line is giving these arguments:

* @$func@ = @abc_add_text@ (hypothetical)
* @$event@ = @article_ui@
* @$step@ = @extend_col_1@

So @abc_add_text@ is the named custom function in this case, and @article_ui@ and @extend_col_1@ are the actual _event_ and _step_ in core that define the callback action. The event value (@article_ui@) makes clear the callback action is made to the __include/txp_article.php__ file, which is where all **Write** panel UI modification callbacks are made to.

The next line of code is the actual callback function, namely @abc_add_text()@. The particular @$event@/@$step@ combination passed to the function only outputs new content (we're not modifying anything), so @$data@ and @$rs@ are ignored and the content is returned (output) as defined.

h4(#sec7-1-2). Adding new elements to existing panel markup

Another way to add elements is to existing markup. For example, to add the @url_title@ below the article's **Title** field, you could do this:

bc.. register_callback('abc_append_item', 'article_ui', 'title');

function abc_append_item($event, $step, $data, $rs) {
   $urlttl = isset($rs['url_title']) ? '&lt;br/&gt;'.$rs['url_title'] : '';

   return $data.$urlttl;
}

p. Here we return the default markup (@$data@) and tack on our own markup which we read from the record set (@$rs@) that was passed to our function.

h3(#sec7-2). Altering admin-side panel elements

Most of the UI elements in the admin-side panels can be altered or removed, depending on how you write your functions. In this let's alter something by looking in the default markup for particular items to change. This is the least robust mechanism but it can be very useful at times.

Consider this example, which adds a radio button to the existing button series in the **Write** panel's **Status** widget:

bc.. register_callback('abc_altered_status', 'article_ui', 'status');

function abc_altered_status($event, $step, $data, $rs) {

   $stat = isset($rs['Status']) ? $rs['Status'] : '';

   $new_status = n.t.'&lt;li&gt;'.radio('Status', 6, ($stat == 6) ? 1 : 0, 'status-6').'&lt;label for=&quot;status-6&quot;&gt;Velcro&lt;/label&gt;&lt;/li&gt;';

   $data = str_replace('&lt;/ul&gt;', $new_status.'&lt;/ul&gt;', $data);

   return $data;
}

Again we've used @register_callback()@ to define our callback function, and in this case we've employed the @$event@/@$step@ combination for targeting the **Status** widget in the **Write** panel. The function then pulls the default record set, defines a new status button option for inclusion, and returns (outputs) the resulting altered list.

h3(#sec7-3). Removing admin-side panel elements

In this case, let's say you wanted to remove the **Keywords** field.[6] You could hook into the @keywords@ step and return a space character:

bc.. register_callback('abc_remove_keywords', 'article_ui', 'keywords');

function abc_remove_keywords($event, $step, $data, $rs) {
   return ' ';
}

p. That's it! The returned space character (@return ' '@) replaces the keywords field, effectively removing it.

fn6. *Attention!* Removing elements like this is a little drastic, because other plugins exist that target most UI elements, including the **Keywords** field. Such plugins would fail if they couldn't find the element you had destroyed. Hiding the element with CSS using @display:none@ would be a safer/better approach. If this is a problem for you and you feel you must delete the element, you could set your plugin to run at a lower priority (i.e. greater than "5") so other plugins could render their markup _before_ you remove your targeted element.

h2(#sec8). Plugin lifecycle management and preferences

Plugins can opt into receiving @plugin_prefs@ and @plugin_lifecycle@ events. The opt-in is signaled to core by flagging your intention using @$plugin['flags']@.

@PLUGIN_LIFECYCLE_NOTIFY@ and @PLUGIN_HAS_PREFS@ are defined bit masks (human-readable) that you can use in any appropriate combination (@PLUGIN_LIFECYCLE_NOTIFY | PLUGIN_HAS_PREFS@, etc).

Once you flag your intention to use the events, @register_callback()@ can define where the event fires:

bc. register_callback('abc_plugin_prefs_panel', 'plugin_prefs.abc_plugin');

Or:

bc. register_callback('my_install_routine',
   'plugin_lifecycle.abc_plugin', 'installed'); register_callback('my_delete_routine',
   'plugin_lifecycle.abc_plugin', 'deleted');
register_callback('my_enable_routine',
   'plugin_lifecycle.abc_plugin', 'enabled');;
register_callback('my_disable_routine', 
   'plugin_lifecycle.abc_plugin', 'disabled');

Textpattern reserves the lower twelve bits of @$plugin['flags']@ for its own use, plugin developers may take advantage of the remaining four (@~PLUGIN_RESERVED_FLAGS@). These might come in handy to trigger some one-time actions, as these bits are copied into the __txp_plugin__ table row for any particular plugin whenever it is uploaded.

h2(#sec9). Variables, classes, and constants

**Variables:**

* "Variable list":http://phpcrossref.com/xref/textpattern/_variables/ (via PHP Cross Reference)
* "Accessing global variables":http://www.focusontheclouds.com/home/articles/72/accessing-global-variables-in-textpattern

**Classes:**

* "Classes list":http://phpcrossref.com/xref/textpattern/_classes/ (via PHP Cross Reference)
* "Class in plugins example":http://forum.textpattern.com/viewtopic.php?id=26025

**Constants:**

* "Constants list":http://phpcrossref.com/xref/textpattern/_constants/ (via PHP Cross Reference)

h2(#sec10). Implementation resources

Now you know what plugins are and you're ready to kick plugin ass. You'll probably need some combination of these to see the job through:

**Plugin code template:**

Always use a template when one is available, and there is:

* "Plugin template":https://github.com/textpattern/textpattern-plugin-template
* "Plugin template helper":http://docs.textpattern.io/development/plugin-template-help

**Plugin composer:**

Namely, the "ied_plugin_composer":http://textpattern.org/plugins/588/ied_plugin_composer plugin, as mentioned before. A plugin to build plugins. Ironic, eh? Truth is, this plugin is _extremely_ useful: It allows you to create, code, and document plugins, then publish them in either conventional text format, compressed text format, or exported in the standard template format for sharing with developers or using in the plugin cache directory. This plugin also lets you directly edit plugins that are in the plugin cache directory.

**Plugin user-help template and guidelines:**

One of the "Developer rules of the road":#sec2. When you're plugin is done (or as you code it), it's time to write that tight and useful plugin help documentation. There's a template for that:

* "Plugin user-help guidelines":http://docs.textpattern.io/development/plugin-user-help-guidelines
* "sed_plugin_help_viewer":http://textpattern.org/plugins/612/sed_plugin_help_viewer (A help viewer plugin that you might find... helpful.)

**Code repositories:**

Get your repos here. (Other docs regarding command-line interaction with repos will appear here later.)

* "Fetching development version of Textpattern":http://docs.textpattern.io/development/fetching-dev-version-of-txp (Also addresses which branch or release to use, and where to get old versions.)

**Integration and waypoints:**

These may be useful depending on the kind of plugin you're building. 

* "User role types and privileges":http://docs.textpattern.io/administration/admin/user-role-types-and-privileges (If your plugin will interact with user accounts.)
* "Database schema reference":http://docs.textpattern.io/development/database-schema-reference (If your plugin will need a database table.)
* "Extensions":http://docs.textpattern.io/administration/extensions/ (If your admin-side plugin will provide __Publisher__ controls in it's own panel under **Extensions**.)

**Miscellaneous tools:**

These are "questionable":https://github.com/textpattern/textpattern.github.io/issues/34 until further notice.

* "Generate a list of tags and attributes":http://forum.textpattern.com/viewtopic.php?id=12299 [???]
* "Command-line plugin decoder":http://forum.textpattern.com/viewtopic.php?id=4252 [???]

h2(#sec11). Getting help

If you need a warm shoulder to lean on, subscribe to the "plugin development mailing list":http://lists.textpattern.com/, which might be rather quiet unless you use it. 

The Textpattern Support Forum, notably the "Plugin discussions":http://forum.textpattern.com/viewforum.php?id=13 area, is a good place to post questions too. 

h2(#sec12). External reading

These are external to official documentation. Their status and value is out of our hands, but you may find something useful there. Not a long list, in any case.

* "How to build a Textpattern plugin":http://txptips.com/how-to-build-a-textpattern-plugin

