---
layout: document
category: development
published: true
title: "Plugin development guidelines"
tags:
  - development 
  - plugins
  - guidelines
---

"ToC":http://docs.textpattern.io ⨠ "Development":http://docs.textpattern.io/development/ ⨠ **Plugin development guidelines**

h1. Plugin development guidelines

A few guidelines, hints, and examples to help ensure you walk through the plugin development process with confidence.

On this page:

* "Development rules":#sec1
* "":#sec1
* "":#sec1

h2(#sec1). Rules of the road

These rules are meant to help ensure that you're producing plugins people will want to use. And that's the whole point, right?

**1) Avoid reinventing the wheel:**

Before you start developing, spend some time researching what plugins exist, what functionality, they provide, and how well they're working for people (often indicated by how popular they are).

While it might be good exercise to reinvent the wheel, building a plugin that does what another plugin already does isn't going to be immediately useful unless it's _extremely_ innovative in some way. 

If you decide to throw caution to the wind and reinvent the wheel anyway (perhaps stepping on toes in the process), make sure you're ready to raise the bar. Somebody has to eventually.
 
**2) You must have a plugin developer prefix:**

Plugin developers _must_ have a developer prefix to identify their work. There are "guidelines for choosing, registering, and using a prefix":http://docs.textpattern.io/development/registered-textpattern-developer-prefixes, so make sure you understand what they are.

**3) Do it the Textpattern way:**

Do it the “Textpattern's way” from the start by using Textpattern functions, whenever possible, instead of re-inventing what already works efficiently. Your goal should be to emulate Textpattern as you expand its capabilities, otherwise you run the risk of your plugin feeling foreign or out of place. 

Additionally, some functions are in place to assist with keeping Textpattern secure and working regardless of host server settings. You should not interfere with this kind of thing.

**4) Write clear and concise plugin help:**

Don't be one of those developers that assumes everyone knows what you know -- the opposite is true. People won't use your plugin if you don't explain how it should be used, no matter how innovative it is. You can avoid fielding a lot of repetitive questions in the support forum by producing good plugin user instructions to begin with. 

Use the "Plugin user help guidelines":http://docs.textpattern.io/development/plugin-user-help-guidelines to ensure your plugin instructions are consistently structured and properly formatted.

**6) Be aware of the helper functions:**

Some helper functions can be found in the “lib” folder:

* @txplib_db.php@ -- for interacting with the Textpattern database
* @txplib_forms.php@ -- to help build various HTML form elements
* txplib_html.php -- to help build various other HTML elements
* @txplib_misc.php@ -- various “miscellaneous” functions.

h2(#sec2). Callbacks

Textpattern makes extensive use of callbacks. Hook into these known points to choose where and when your plugins run. For more information, please see:

* "using_callbacks_in_between_plugins_":/home/www/zendstudio/dokuwiki/bin/doku.php?id=using_callbacks_in_between_plugins
* The "core_callback_list":/home/www/zendstudio/dokuwiki/bin/doku.php?id=core_callback_list

h3(sectionedit3#plugin_lifecycle_management_prefs). Plugin lifecycle management &amp; prefs

From Textpattern 4.2.0 onwards, plugins can opt into receiving

bc. plugin_prefs.abc_my_plugin_name


and

bc. plugin_lifecycle.abc_my_plugin_name


events. This opt-in is signalled to the core by raising the appropriate bits in

bc. $plugin['flags']


.

bc. PLUGIN_LIFECYCLE_NOTIFY


and

bc. PLUGIN_HAS_PREFS


are human-readable defined bit masks for your coding pleasure. Use them in any appropriate orâ€™ed combination (PLUGIN_LIFECYCLE_NOTIFY &#124; PLUGIN_HAS_PREFS etc).

Once you have flagged your intention to use the events, you use the standard register_callback system to invoke your own code when the event fires:

bc. register_callback('my_prefs_page', 'plugin_prefs.abc_my_plugin_name');


or

bc. register_callback('my_install_routine',
   'plugin_lifecycle.abc_my_plugin_name', 'installed'); register_callback('my_delete_routine',
   'plugin_lifecycle.abc_my_plugin_name', 'deleted');
register_callback('my_enable_routine',
   'plugin_lifecycle.abc_my_plugin_name', 'enabled');;
register_callback('my_disable_routine', 
   'plugin_lifecycle.abc_my_plugin_name', 'disabled');


It is worth noting that Textpattern reserves the lower twelve bits of

bc. $plugin['flags']


for its own use, plugin authors may take advantage of the remaining four (

bc. ~PLUGIN_RESERVED_FLAGS


). These might come in handy to trigger some one-time actions, as these bits are copied into the txp_plugin table row for any particular plugin whenever it is uploaded.

h2. Altering admin side markup: pluggable_ui()

Introduced in Textpattern 4.2.0, the

bc. pluggable_ui()


callback system enables plugin authors greater and more efficient control over the admin side user interface. To add or alter elements in previous versions you had to resort to javascript, messy find and replace techniques, or hacking core files.

h4(#removing_admin_side_elements). Removing admin side elements

If you wanted to remove the _keywords_ field from the Write tab you could hook into the 'keywords' step of the Write tab. Do the following in a plugin:

<pre class="code">
register_callback('abc_remove_keywords', 'article_ui', 'keywords');

function abc_remove_keywords($event, $step, $data, $rs) {
   return ' ';
}
</pre>

That's it! If your function returns anything at all (note we return a space character here) then the default markup is dropped in favour of your own markup.

In reality, you probably wouldn't want to do something this drastic unless you were sure there were no other plugins that targeted the keywords field  -  these plugins would fail if they couldn't find the element you'd destroyed. A safer alternative would be to hide the element via the CSS

bc. display:none


. If this is a problem for you and you feel you must delete the element, you could set your plugin to run at a lower priority (above 5) so the other plugin can render its own markup before you zap the keywords field.

h4(#adding_your_own_elements). Adding your own elements

To add something to the interface you can use pluggable_ui() like this:

<pre class="code">
register_callback('abc_add_text', 'article_ui', 'extend_col_1');

function abc_add_text($event, $step, '', $rs) {
   return 'Hello world!';
}
</pre>

That adds the text to the interface immediately below the Textile Help link: that is where the

bc. extend_col_1


step puts its markup. Note that there is no 3rd argument this time because there is no default content to alter.

Another way to add elements is to add them to existing markup. For example, to add the url_title below the article's Title:

<pre class="code">
register_callback('abc_append_item', 'article_ui', 'title');

function abc_append_item($event, $step, $data, $rs) {
   $urlttl = isset($rs['url_title']) ? '&lt;br/&gt;'.$rs['url_title'] : '';

   return $data.$urlttl;
}
</pre>

Notice we return the default markup (

bc. $data


) and tack on our own markup which we read from the record set that was passed to our function.

h4(#changing_elements). Changing elements

The final mechanism for altering data is good old fashioned search 'n' replace by looking in the default markup for particular items to change. This is the least robust mechanism but it can be very useful at times:

<pre class="code">
register_callback('abc_altered_status', 'article_ui', 'status');

function abc_altered_status($event, $step, $data, $rs) {

   $stat = isset($rs['Status']) ? $rs['Status'] : '';

   $new_status = n.t.'&lt;li&gt;'.radio('Status', 6, ($stat == 6) ? 1 : 0, 'status-6').'&lt;label for=&quot;status-6&quot;&gt;Velcro&lt;/label&gt;&lt;/li&gt;';

   $data = str_replace('&lt;/ul&gt;', $new_status.'&lt;/ul&gt;', $data);

   return $data;
}
</pre>

One new status radio button is added to the existing set.

