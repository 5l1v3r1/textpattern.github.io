---
layout: document
category: development
published: true
title: "Core callbacks list"
tags:
  - development 
  - plugins
  - callbacks
  - core
---

h1. Core callbacks list

This is a reference of all callbacks used in Textpattern. 

h2(#sec1). Regular public-side callbacks

**_publish.php_**

notextile. <div class="tabular-data" itemscope itemtype="http://schema.org/Table">
	
|_. Events/steps |_. When it occurs |_. What it allows/does |
| event = _pretext_ | at the very top of the  @pretext()@ function, just after the prefs have been extracted | - |
| event = _pretext_end_ | just after @pretext()@ has run but before its variables have been extracted into the global scope | overrides anything set in @pretext()@ or adds variables to it |
| event = _file_download_ | as soon as a file_download is detected | intercepts the regular file downloading process |
| event = _textpattern_ | just before the page is rendered | - |
| event = _textpattern_end_ | once the page has been fully rendered | - |

notextile. </div>

**_publish/atom.php_**

notextile. <div class="tabular-data" itemscope itemtype="http://schema.org/Table">

|_. Events/steps |_. When it occurs |_. What it allows/does |
| event = _atom_head_ | after the feed's header has been set | adds items to the feed's header |
| event = _atom_entry_ | as soon as the article's data has been populated | injects extra markup after the standard feed items have been generated |

notextile. </div>

**_publish/rss.php_**

notextile. <div class="tabular-data" itemscope itemtype="http://schema.org/Table">

|_. Events/steps |_. When it occurs |_. What it allows/does |
| event = _rss_head_ | after the feed's header has been set | adds items to the feed's header |
| event = _rss_entry_ | as soon as the article's data has been populated | injects extra markup after the standard feed items have been generated |

notextile. </div>

**_publish/comment.php_**

notextile. <div class="tabular-data" itemscope itemtype="http://schema.org/Table">

|_. Events/steps |_. When it occurs |_. What it allows/does |
| event = _comment.form_ | at the end of the @commentForm()@ function | injects markup after the textarea generated by the @<txp:comment_message_input />@ |
| event = _comment.save_ | just before a comment is posted | makes additional decisions based on the comment content (e.g. anti-spam plugins) |
| event = _comment.saved_ | just after a comment is posted to the database | argument #3 is an array of name-value pairs containing the message text, name, email, web, parentid, commentid, ip, and visible status of the posted comment |

notextile. </div>

**_publish/log.php_**

notextile. <div class="tabular-data" itemscope itemtype="http://schema.org/Table">

|_. Event/steps |_. When it occurs |_. What it allows/does |
| event = _log_hit_ | just before a log message is recorded in the txp_log table | alters the log message |

notextile. </div>

h2(#sec2). Function- and tag-based callbacks

**_lib/txplib_misc.php_**

notextile. <div class="tabular-data" itemscope itemtype="http://schema.org/Table">

|_. Events/steps |_. When it occurs |_. What it allows/does |
| event = _sanitize_for_url_ | at the start of the @sanitizeForUrl()@ function | apply your own URL sanitization rules passes the text to be sanitized as the callback's 4th argument |
| event = _sanitize_for_file_ | at the start of the @sanitizeForUrl()@ function | apply your own filename sanitization rules passes the text to be sanitized as the callback's 4th argument |
| event = _sanitize_for_page_ | at the start of the @sanitizeForUrl()@ function | apply your own page name sanitization rules passes the text to be sanitized as the callback's 4th argument |
| event = _txp_die_ step = _http_status_code_ | once the page's HTTP status has been determined | passes the numerical HTTP status code as the callback's _step_ (e.g., @410@, @301@, etc) allowing you to target particular status codes and take action |

notextile. </div>

h2(#sec3). Plugin callbacks

**_include/txp_plugin.php_**

In order to process these callbacks, your plugin must raise the @PLUGIN_LIFECYCLE_NOTIFY@ flag to register its intent. In addition, if you wish to offer a link to your plugin's preferences from the  **"Plugins":http:docs.textpattern.io/administration/plugins-panel** panel, you must raise the @PLUGIN_HAS_PREFS@ flag.

notextile. <div class="tabular-data" itemscope itemtype="http://schema.org/Table">

|_. Events/steps |_. When it occurs |_. What it allows/does |
| event = _plugin_lifecycle.abc_your_plugin_ step = _enabled_ | when somebody switches abc_your_plugin to "Enabled" (Yes) from the **Plugins** panel | - |
| event = _plugin_lifecycle.abc_your_plugin_ step = _disabled_ | when somebody switches abc_your_plugin to "Disabled" (No) on the **Plugins** panel | - |
| event = _plugin_lifecycle.abc_your_plugin_ step = _installed_ | when abc_your_plugin has been installed by the act of the user pasting its code in the **Plugins** panel and clicking Install on the next screen | - |
| event = _plugin_lifecycle.abc_your_plugin_ step = _deleted_ | when abc_your_plugin has been removed by the act of the user selecting it and deleting it from the **Plugins** panel (note that the _plugin_lifecycle.abc_your_plugin_ / _disabled_ callback fires first) | - |

notextile. </div>

h2(#sec4). Regular admin-side callbacks

**_lib/txplib_head.php_**

*event = _admin_side_ step = _head_end_*
 occurs just before the closing

bc. <nowiki></head></nowiki>


tag on every admin side panel useful for injecting javascript or style rules into the page's header *event = _admin_side_ step = _pagetop_*
 occurs immediately before control is handed to the theme to render the navigation bar *event = _admin_side_ step = _pagetop_end_*
 occurs immediately after the theme has finished rendering the navigation bar useful for adding admin-wide markup below pagetop

**_lib/txplib_html.php_**

*event = _admin_side_ step = _body_end_*
 occurs once the theme has rendered its footer allows you to tack on any extra admin-wide information immediately before the closing @</body>@ tag *event = _some_event_ui_ step = _multi_edit_options_*
 allows you to alter or augment the multi-edit select list. argument #3 contains the options array which is passed by reference so it may be altered directly

**_include/txp_article.php_**

*event = _article_posted_*
 called immediately after article creation *event = _article_saved_*
 called immediately after article update/save *event = _ping_*
 occurs just before a ping notification is sent upon publication of an article so you may intercept the ping and provide your own *event = _article_ui_ step = _partials_meta_*
 allows you to alter or augment the interface, usually based on the data sent to/from the AJAX save process argument #3 is the record set of the article being edited argument #4 is the partials array, which comprises: *_key_* unique name of the item available to alter, then an array: *_mode_* the mechanism by which the partial may be updated *_selector_* the wholly encapsulated DOM selector to which the partial applies *_callback_* the callback function to utilise to update the nominated part of the interface *_html_* (optional) return value of the callback function

**_include/txp_diag.php_**

*event = _diag_results_ step = _high_ or _low_*
 occurs at the end of the @doDiagnostics()@ function for rendering the content of the Adminâ†’Diagnostics panel allows you to add any extra information to the diagnostic output depending on the level of output the user has chosen (high or low)

**_include/txp_admin.php_**

*event = _authors_deleted_*
 occurs just after user(s) have been deleted and all assets have been reassigned an array of deleted user names is passed as a parameter

**_include/txp_category.php_**

*event = _categories_deleted_*
 occurs just after one or more categories have been deleted and the tree has been rebuilt an array of deleted category IDs is passed as a parameter

**_include/txp_css.php_**

*event = _css_deleted_*
 occurs just after a stylesheet has been deleted the name of the deleted stylesheet is passed as a parameter

**_include/txp_discuss.php_**

*event = _discuss_deleted_*
 occurs just after one or more comments have been deleted, but _before_ the comment counts have been updated in the affected articles an array of the deleted comment IDs is passed as a parameter

**_include/txp_file.php_**

*event = _file_deleted_*
 occurs just _before_ each file is deleted the first additional parameter is the file's ID the second additional parameter is the full path to the file

**include/txp_form.php**

*event = _forms_deleted_*
 occurs just after one or more forms have been deleted an array of deleted form names is passed as a parameter

**_include/txp_image.php_**

*event = _image_deleted_ step = _image_*
 occurs just before an image and its thumbnail are deleted the image ID is passed as a parameter *event = _image_uploaded_ step = _image_*
 occurs just after an image has been uploaded or replaced by another image. The image ID is passed as a parameter

**_include/txp_link.php_**

*event = _links_deleted_*
 occurs just after one or more links have been deleted an array of deleted link IDs is passed as a parameter

**_include/txp_list.php_**

*event = _articles_deleted_*
 occurs just after one or more articles have been deleted and any associated comments have had their visibility removed an array of deleted article IDs is passed as a parameter

**_include/txp_page.php_**

*event = _page_deleted_*
 occurs just after a page template has been deleted the name of the deleted page is passed as a parameter

**_include/txp_section.php_**

*event = _sections_deleted_*
 occurs just after one or more sections have been deleted an array of deleted section names is passed as a parameter

h2(#sec5). Admin-side criteria callbacks

These callbacks allow you to alter the criteria that are used in the various panels. You can append SQL to the criteria so you may apply additional filtering.

Note that the criteria is _appended_ so existing search parameters are honoured. Therefore your returned statement should begin with

bc. " AND ..."


. If you wish to ignore any previous filtering, begin with

bc. " AND 1 AND ..."


.

The third argument to your callback function contains the current criteria used so you may make decisions based on its contents (for example, you may not want to filter the results if a search has been performed).

The callbacks all have event = _admin_criteria_ and the following steps:

* Articles panel: _list_list_
* Comments panel: _discuss_list_
* Files panel: _file_list_
* Forms panel: _form_list_
* Images panel: _image_list_
* Links panel: _link_list_
* Pages panel: _page_list_
* Sections panel: _section_list_
* Styles panel: _css_list_
* Users panel: _author_list_
* Visitor logs panel: _log_list_

h2(#sec6). Admin side validation callbacks

The following callbacks allow you to alter or append to the constraints imposed by the core when saving data. Textpattern will check that the passed values for things like categories, sections, and so forth actually exist in the database to avoid new ones being introduced at unexpected places.

Inside plugins, you may wish to open up or restrict data in certain types of actions, or create entirely new constraints and take advantage of the built-in validator. If so, these callbacks are the ones to use.

Argument #3 is the incoming array of values posted from the save operation, unsanitized. Argument #4 is the array of constraints.

Note that these additional arguments are all passed by reference to your application, so you can alter them directly.

h4(#articles_panel). Articles panel

* event = _article_ui_

step = _validate_publish_

* event = _article_ui_

step = _validate_save_

h4(#comments_panel). Comments panel

* event = _discuss_ui_

step = _validate_save_

h4(#files_panel). Files panel

* event = _file_ui_

step = _validate_save_

h4(#images_panel). Images panel

* event = _image_ui_

step = _validate_save_

h4(#links_panel). Links panel

* event = _link_ui_

step = _validate_save_

h2(#sec7). pluggable_ui() callbacks

Argument #1 passed to your function is the _event_ and argument #2 is the _step_. Arguments 3 and 4 (and occasionally 5) vary depending on the functionality of the UI component. In general, the following holds true unless otherwise stated:

* argument #3 is the default markup
* argument #4 is the record set of the item that is being edited (if applicable)

Parsing argument #3 allows you to alter what was originally going to be displayed, and then return it. Or you may discard this markup and return your own instead.

h4(#write_panel_code_include_txp_articlephp_code). Write panel (&lt;code&gt;include/txp_article.php&lt;/code&gt;)

All of the UI elements on this page have the same event = _article_ui_.

*step = _sidehelp_*
 allows you to replace or alter the 'Textile Help' lever and its entire contents *step = _extend_col_1_*
 allows you to add your own markup below the sidehelp argument #3 is empty as there is no default content here *step = _markup_*
 allows you to replace or alter the two select lists for article and excerpt markup *step = _override_*
 allows you to alter or replace the _override form_ select list *step = _view_*
 allows you to alter or replace the view/HTML/Preview icons *step = _sort_display_*
 allows you to alter or replace the _section_ and _category_ select lists *step = _timestamp_*
 allows you to alter or replace the article's posted timestamp area *step = _expires_*
 allows you to alter or replace the article expiry area *step = _custom_fields_*
 allows you to alter or replace the block of custom field input controls *step = _keywords_*
 allows you to alter or replace the keywords area *step = _article_image_*
 allows you to alter or replace the article_image area *step = _url_title_*
 allows you to alter or replace the URL title input area *step = _recent_articles_*
 allows you to alter or replace the recent articles list *step = _title_*
 allows you to alter or replace the article's title element *step = _body_*
 allows you to alter or replace the article's body element *step = _excerpt_*
 allows you to alter or replace the article's excerpt element *step = _author_*
 allows you to alter or replace the author / published-at info *step = _status_*
 allows you to alter or replace the article's status area *step = _categories_*
 allows you to alter or replace the article's category1/category2 area *step = _section_*
 allows you to alter or replace the article's section select list *step = _annotate_invite_*
 allows you to alter or replace the article's comments on/off and comments invite area

h4(#categories_panel_code_include_txp_categoryphp_code). Categories panel (&lt;code&gt;include/txp_category.php&lt;/code&gt;)

*event = _category_ui_ step = _extend_detail_form_*
 allows you to add markup above the category _Save_ button when editing an individual category argument #3 is empty because there is no default content

h4(#images_panel_code_include_txp_imagephp_code). Images panel (&lt;code&gt;include/txp_image.php&lt;/code&gt;)

*event = _image_ui_ step = _extend_controls_*
 allows you to add markup to the txp-control-panel area argument #3 is empty because there is no default content *event = _image_ui_ step = _extend_detail_form_*
 allows you to add markup above the image _Save_ button when editing an image argument #3 is empty because there is no default content *event = _image_ui_ step = _thumbnail_*
 allows you to alter/replace the thumbnail in the image list *event = _image_ui_ step = _fullsize_image_*
 allows you to alter/replace the main image in the image edit panel *event = _image_ui_ step = _image_edit_*
 allows you to alter/replace the area containing the upload (replace) image form *event = _image_ui_ step = _thumbnail_image_*
 allows you to alter/replace the thumbnail image in the image edit panel *event = _image_ui_ step = _thumbnail_edit_*
 allows you to alter/replace the area containing the thumbnail upload form *event = _image_ui_ step = _thumbnail_create_*
 allows you to alter/replace the 'thumbnail create' area containing the width / height input fields and crop checkbox

h4(#files_panel_code_include_txp_filephp_code). Files panel (&lt;code&gt;include/txp_file.php&lt;/code&gt;)

*event = _file_ui_ step = _extend_detail_form_*
 allows you to add markup above the file _Save_ button when editing a file argument #3 is empty because there is no default content the same callback is used whether the file you are editing exists or is missing from the database  -  use the absence or availability of the 4th argument (record set) to determine which state the panel is in

h4(#links_panel_code_include_txp_linksphp_code). Links panel (&lt;code&gt;include/txp_links.php&lt;/code&gt;)

*event = _link_ui_ step = _extend_detail_form_*
 allows you to add markup above the link _Save_ button argument #3 is empty because there is no default content

h4(#sections_panel_code_include_txp_sectionphp_code). Sections panel (&lt;code&gt;include/txp_section.php&lt;/code&gt;)

*event = _section_ui_ step = _extend_detail_form_*
 allows you to add markup immediately above the _Save_ button in the _section edit_ panel argument #3 is empty because there is no default content the record set in argument #4 contains only the columns _page_ and _css_ when in the default area, and contains all columns at other times

h4(#users_panel_code_include_txp_adminphp_code). Users panel (&lt;code&gt;include/txp_admin.php&lt;/code&gt;)

*event = _author_ui_ step = _extend_detail_form_*
 allows you to add markup immediately above the author _Save_ button argument #3 is empty because there is no default content

h4(#preferences_panel_code_include_txp_prefsphp_code). Preferences panel (&lt;code&gt;include/txp_prefs.php&lt;/code&gt;)

*event = _prefs_ui_ step = _gmtoffset_*
 allows you to alter or replace the _Time zone_ select list (just the input control, not the label) argument #4 is the preference name in the txp_prefs table (_timezone_key_ in this case) argument #5 is the preference's value (i.e. the chosen item) *event = _prefs_ui_ step = _is_dst_*
 allows you to alter or replace the _DST enabled_ radio buttons (just the input control, not the label) argument #4 is the preference name in the txp_prefs table (_is_dst_ in this case) argument #5 is the preference's value (i.e. the numerical state of the radio button) *event = _prefs_ui_ step = _weeks_*
 allows you to alter or replace the _Comments disabled after_ select list (just the input control, not the label) argument #4 is the preference name in the txp_prefs table (_comments_disabled_after_ in this case) argument #5 is the preference's value (i.e. the numerical value of the selected item; in this case the number of days to keep commenting open) *event = _prefs_ui_ step = _custom_set_*
 allows you to alter or replace the Custom Field text boxes on the Advanced Prefs panel (just the input controls, not the labels). Each text box is called separately; you distinguish between them using argument #4 argument #4 is the preference name in the txp_prefs table (_custom_set_N_ by default, where _N_ is the custom field number) argument #5 is the preference's value (i.e. the name of the custom field) *event = _prefs_ui_ step = _theme_name_*
 allows you to alter or replace the _Admin theme_ select list on the Advanced Prefs panel (just the input control, not the label)

h2(#sec8). Theme callbacks

The following callbacks are all usable to alter various elements within admin-side themes.

h4(#code_lib_txplib_themephp_code). &lt;code&gt;lib/txplib_theme.php&lt;/code&gt;

*event = _admin_side_ step = _theme_name_*
 allows you to alter a theme's name when it is being initialised there is no argument #4

h4(#code_lib_txplib_headphp_code1). &lt;code&gt;lib/txplib_head.php&lt;/code&gt;

*event = _admin_side_ step = _header_*
 allows you to replace the standard pagetop header with something of your choosing. Theme authors do this by writing a

bc. header()


function in their theme's PHP file there is no argument #4

h4(#code_lib_txplib_htmlphp_code1). &lt;code&gt;lib/txplib_html.php&lt;/code&gt;

*event = _admin_side_ step = _footer_*
 allows you to replace the standard end_page footer with something of your choosing. Theme authors do this by writing a

bc. footer()


function in their theme's PHP file there is no spoon *event = _some_event_ui_ step = _upload_form_*
 allows you to alter or replace Textpattern's standard upload forms throughout the admin side _some_event_ is the name of the event on the panel upon which the input form appears (e.g. on the Files panel, the event is 'file' so the

bc. pluggable_ui()


event name is _file_ui_) argument #4 contains the remainder of the arguments to the

bc. upload_form()


function, i.e. 'label', 'pophelp', 'step', 'event', 'id', 'max_file_size', 'label_id' and 'class'.

