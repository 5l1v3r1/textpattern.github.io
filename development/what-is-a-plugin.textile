---
layout: document
category: development
published: true
title: "What is a plugin?"
tags:
  - development 
  - plugins
  - 
---

"ToC":http://docs.textpattern.io ⨠ "Development":http://docs.textpattern.io/development/ ⨠ **What is a plugin?**

h1. What is a plugin?

A “plugin” is a container for any kind of PHP code.

You can see the code for any installed plugin by clicking its name in the table on the **"Plugins":http://docs.textpattern.io/administration/admin/plugins-panel**. Code can be a few lines of PHP, or _function_ and _class_ definitions.

Defining functions in the plugin is a common and easy way to start out, as they can be called from templates. But more advanced ways exist for plugins to influence Textpattern behaviour. We can categorise plugins by their functionality in roughly three ways:

* “on demand” - providing tags for templates and forms
* “up front” - intercepting pagerequests (either all or those having special characteristics)
* “in between” - using txp-provided hooks to automatically change or add behaviour

This is just one of several possible ways to look at plugins.

Another aspect you will commonly find is the distinction between public-side and "admin-side":/home/www/zendstudio/dokuwiki/bin/doku.php?id=admin-side (and sometimes library) plugins. Admin-side plugins often (but not strictly) make use of the "extensions":/home/www/zendstudio/dokuwiki/bin/doku.php?id=extensions tab in Textpattern's interface. It is also fairly common for many practical plugins to “cross boundaries” and fall into several of the above categories at once, because a plugin is really nothing more than a container for code.

