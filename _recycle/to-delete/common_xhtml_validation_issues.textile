\n"mininav_tutorials":/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?id=&media=mininav_tutorials

Web page validation is an important part of good Web site design, and the W3C's "Markup Validation Service":http://validator.w3.org/ is a good way to test it. There are a number of validation snafus that people frequently have with Textpattern due to the way it natively handles content, especially for _XHTML Strict_ doctypes. We try to cover these issues here.

h3(sectionedit1#ascii_characters). ASCII Characters

One of the requirements of XHTML-_Strict_ validation is to code certain characters in ASCII syntax. The following characters must always be entered as ASCII:

<ul>
<li><p>Ampersand (&amp;) - must be encoded as an HTML entity:</p>
bc. &amp;


<p>(this is also applies for ampersands used in URLs as well).</p></li>
</ul>

h3(sectionedit2#div_elements). Div Elements

Division (div) elements need to be escaped from Textile in the course of an article or the resulting block will be rendered with surrounding paragraph tags, which will not validate. Simply add a single blank whitespace at the beginning of the line where the div begins.

*Doing it wrong (div block has no blank space before first div tag):*

<pre class="code">
Start of first paragraph....end of paragraph.

&lt;div&gt;...content here...&lt;/div&gt;

Start of second paragraph....end of paragraph.
</pre>

Code renders as...

<pre class="code">
&lt;p&gt;Start of first paragraph....end of paragraph.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;...content here...&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Start of second paragraph....end of paragraph.&lt;/p&gt;
</pre>

This is not semantically correct, and therefore will not validate.

*Doing it right:*

<pre class="code">
Start of first paragraph....end of paragraph.

 &lt;div&gt;...content here...&lt;/div&gt;

Start of second paragraph....end of paragraph.
</pre>

producing correct code output:

<pre class="code">
&lt;p&gt;Start of first paragraph....end of paragraph.&lt;/p&gt;

&lt;div&gt;...content here...&lt;/div&gt;

&lt;p&gt;Start of second paragraph....end of paragraph.&lt;/p&gt;
</pre>

h4(#block_elements_wrapped_by_paragraph_elements_and_laced_with_break_elements). Block Elements Wrapped by Paragraph Elements and Laced with Break Elements

Cetain block elements, particularly lists that are composed of multiple types of XHTML tags, have a tendency to be laced with non-semantic break elements in addition to being wrapped in the paragraph element as described for divisions and blockquotes above. Again, this is due to the way standard XHTML syntax is used in a Textpattern Article, but dealing with it is slightly different than before.

h5(#example_1list_elements_using_an_unordered_list). Example 1: List Elements (Using an Unordered List)

If we created an Article with three block elements as we did before using standard XHTML markup, but this time use an unordered list (instead of a division or blockquote) we might intuitively do so like this...

<pre class="code">
Start of first paragraph....end of paragraph.

&lt;ul&gt;
&lt;li&gt;List item one.&lt;/li&gt;
&lt;li&gt;List item two.&lt;/li&gt;
&lt;li&gt;et cetera&lt;/li&gt;
&lt;/ul&gt;

Start of second paragraph....end of paragraph.
</pre>

As before, Textpattern will add the additional paragraph tags around the non-paragraph block element, but note that is also throws in some nasty, non-semantic _break_ tags as well when this markup is served online...

<pre class="code">
&lt;p&gt;Start of first paragraph....end of paragraph.&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;&lt;br /&gt;
&lt;li&gt;List item one.&lt;/li&gt;&lt;br /&gt;
&lt;li&gt;List item two.&lt;/li&gt;&lt;br /&gt;
&lt;li&gt;et cetera&lt;/li&gt;&lt;br /&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Start of second paragraph....end of paragraph.&lt;/p&gt;
</pre>

The above markup will definitely not validate. However, you can get the standard XHTML markup to work in the article by again adding a needed blank whitespace, but this time you need to add a space before each of the list complex tags that start a new line; specifically, you will add a blank whitespace before the opening and closing list tag (ul), and before each of the opening list item (li) tags, like this...

<pre class="code">
Start of first paragraph....end of paragraph.

 &lt;ul&gt;
 &lt;li&gt;List item one.&lt;/li&gt;
 &lt;li&gt;List item two.&lt;/li&gt;
 &lt;li&gt;et cetera&lt;/li&gt;
 &lt;/ul&gt;

Start of second paragraph....end of paragraph.
</pre>

Note the whole list complex, from open to closing list tag, is indented in the article by a single blank whitespace. This will result in perfectly fine and valid markup as...

<pre class="code">
&lt;p&gt;Start of first paragraph....end of paragraph.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List item one.&lt;/li&gt;
&lt;li&gt;List item two.&lt;/li&gt;
&lt;li&gt;et cetera&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start of second paragraph....end of paragraph.&lt;/p&gt;
</pre>

The examples provided above explain how to manually added standard XHTML syntax to an article so the resulting markup output will validate correctly. However, there are two other methods for achieving markup that validates. One is to use the upm_quicktags plugin, and the other is to use Textile. Which one you may find to be more effective for you will depend on how comfortable you are with writing syntax. If you (or the someone else using the Textpattern site) are more comfortable with text editing tools as opposed to manual development, then the upm_quicktags plugin might be right for you. On the other hand, if you are comfortable with XHTML, or simply want to do things in the easiest, cleanest way possible, then the suggested method is Textile. Both of these approaches are discussed in the next two sections.

h4(#upm_quicktags_plugina_button_solution_for_xhtml_syntax_editing). upm_quicktags Plugin: A Button Solution for XHTML Syntax Editing

If you do not trust yourself with writing standard XHTML syntax markup, the upm_quicktags plugn can do the job for you.

* Get the plugin from the "Textpattern Resources":http://textpattern.org/ site, "right here":http://textpattern.org/search/?selectwhere=1&selecthow=1&selectdate=1&selectresults=result_10&submitsearch=1&q=upm_quicktags.
* Read the documentation that comes with the plugin, and install the plugin in the "plugins":/home/www/zendstudio/dokuwiki/bin/doku.php?id=plugins tab in your site administration area.

h4(#textilethe_easiest_and_cleanest_solution_for_non-paragraph_block_elements). Textile: The Easiest and Cleanest Solution for Non-paragraph Block Elements

"Textile":/home/www/zendstudio/dokuwiki/bin/doku.php?id=glossary#textile offers a much easier and cleaner way of adding block elements to your articles; not only does it eliminate the need to add blank spaces before the block element tags, it also is a lot easier to write and read. If you use Textile to add block elements, Textpattern will understand the Textile syntax slightly differently, essentailly realizing that the indicated block elements are indeed non-paragraph elements, and therefor will not wrap them in paragraph element tags or add unnecessary break elements. You are higly encouraged to learn about Textile if you have not already.

Below is another demonstration of the scenario above for the list element, but this time instead of using standard markup, we use Textile to solve our validation dilemma.

We begin by first drafting our article as follows...

<pre class="code">
Start of first paragraph....end of paragraph.

* List item one.
* List item two.
* et cetera

Start of second paragraph....end of paragraph.
</pre>

The first thing you should realize is how much easier that is to write, and how much cleaner the text looks. The Textile part is simply the three asterisks that start each of the list item lines. No space is added before the asterisks, but a single space is used between them and the line content. Textile is designed to know that when this sequence of syntax is used, the following should be output (which in fact is what happens)...

<pre class="code">
&lt;p&gt;Start of first paragraph....end of paragraph.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List item one.&lt;/li&gt;
&lt;li&gt;List item two.&lt;/li&gt;
&lt;li&gt;et cetera&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start of second paragraph....end of paragraph.&lt;/p&gt;
</pre>

The Textile syntax is automatically converted to standard XHTML  -  without the paragraph element wrapping problems and break tags  -  and validates perfectly when tested with the W3C validator (assuming there are no other problems with the page).

