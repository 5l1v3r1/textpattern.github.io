\nTextpattern plugins are perhaps best thought of as functions supplementary to those found in

bc. textpattern/publish/taghandlers.php


. Functions residing in this file respond to

bc. <txp:foo />


and

bc. <txp:foo>bar</txp:foo>


tags found in pages, forms, articles and other dynamic templates in Textpattern.

A template for plugin distribution is available at:

"$":https://github.com/textpattern/textpattern-plugin-template

h3(sectionedit1#package_contents). Package Contents

<ol>
<li>bc. zem_tpl.php


<p>contains the code to compile plugins into the format required by the Textpattern plugin installer.</p></li>
<li>bc. zem_plugin.php


<p>is the template itself. Make a copy of this file and edit it to write your plugin.</p></li>
<li>bc. zem_example.php


<p>is a simple example plugin. It demonstrates both public-side tags and admin-side user interface features.</p></li>
</ol>

h3(sectionedit2#typical_use_command-line). Typical Use (Command-line)

bc. $ cp zem_plugin.php abc_myplugin.php
[edit abc_myplugin.php]
$ php abc_myplugin.php > abc_myplugin-0.1.txt


abc_myplugin-0.1.txt is the finished plugin, ready to install.

h3(sectionedit3#quick_notes). Quick Notes

<ul>
<li><p>Whatever is returned by the plugin function will be output by the corresponding</p>
bc. <txp:plugin_name />


<p>tag.</p></li>
<li><p>Plugin functions have access to all the functions available to</p>
bc. publish.php


<p>, including everything in</p>
bc. textpattern/lib


<p>. Further reference on these resources is forthcoming.</p></li>
<li><p>If you would like to pass variables to the plugin function(s) via paramaters in the</p>
bc. <txp:plugin_name />


<p>tag, these will be passed as the first argument to the function as an associative array (</p>
bc. $varname => $value


<p>).</p></li>
<li><p>If you would like to pass a variable to the plugin function by enclosing it in</p>
bc. <txp:foo>bar</txp:foo>


<p>, this will be passed as the second argument to the function as a string.</p></li>
<li><p>Do not use</p>
bc. <?php ?>


<p>tags within the plugin source.</p></li>
</ul>

h3(sectionedit4#speedy_development). Speedy Development

It speeds up development tremendously if you do the following:

<ol>
<li><p>Make sure plugin name and plugin filename correspond, e.g.: zem_test should be in</p>
bc. zem_test.php


<p>.</p></li>
<li><p>Create a directory</p>
bc. /full/path/dev/plugins


<p>.</p></li>
<li><p>Drop your uncompiled plugins in that directory. Do not put</p>
bc. zem_tpl.php


<p>in the same directory.</p></li>
<li><p>Admin &gt; Advanced Preferences, set plugin cache dir to</p>
bc. /full/path/dev/plugins


<p>.</p></li>
</ol>

Now during development you can skip the compile, upload, activate steps (and you're not confined to editing in the admin panel or copy &amp; paste). Simply edit the file in the tmp dir, it will be included on each run.

Page last updated on "currentdayname":/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?id=&media=currentdayname, "currentmonthname":/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?id=&media=currentmonthname "currentday":/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?id=&media=currentday, "currentyear":/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?id=&media=currentyear at "currenttime":/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?id=&media=currenttime (UTC/GMT).

