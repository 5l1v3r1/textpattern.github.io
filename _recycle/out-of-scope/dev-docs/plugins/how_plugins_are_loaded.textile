\nPlugins are loaded very early during script execution. It happens in textpattern/publish.php (public-side) and in textpattern/index.php (admin-side). Look out for

bc. load_plugins


to see where it is happening.

By setting the plugin-type in your plugin you can control how a plugin will be loaded:

* A “public” plugin (0) will only be loaded on the public side
* An “admin + client” plugin (1) will be loaded on both public _and_ the admin sides
* A “library” plugin (2) will not automatically load, rather it loads when included/required by other plugins
* An “admin” plugin (3) will only be loaded on the admin side and may _not_ make asynchronous calls
* An “admin + AJAX” plugin (4) will only be loaded on the admin side and may make asynchronous calls
* An “admin + public + AJAX” plugin (5) will be loaded on both the admin and public sides and may make asynchronous calls

The code of the plugin is then

bc. eval()


'ed (or included) within that

bc. load_plugins()


function, *not* in the global scope. This means if you need to use global variables, you have to explicitly set them to be global. Functions and classes are always in the “global scope”, so there is no problem with that.

Understanding how plugins are loaded, also shows how you can write “on demand” and “up front” plugins. Defining a function will make it available as a tag in forms and templates. Whereas any code that is outside of any function/class definition will be executed right away. You can check for Request-Variables and initiate some action and

bc. exit;


the execution of the script (for example to serve images or other binary data from within a plugin).

