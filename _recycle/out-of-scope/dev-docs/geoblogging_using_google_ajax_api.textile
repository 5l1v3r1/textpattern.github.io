\n

h3(sectionedit1#overview). Overview

A Geoblogging tutorial for Textpattern that uses the Google AJAX API by "David Hall":http://spotthehall.com/ aka Spot

This method follows the earlier work by David Ramos - "geoblogging_with_textpattern_and_the_google_maps_api":/home/www/zendstudio/dokuwiki/bin/doku.php?id=geoblogging_with_textpattern_and_the_google_maps_api. But extends the function, by loading version 2 of the Maps API, incorporates parsing of url co-ordinates plus zoom level, places "ICBM":http://en.wikipedia.org/wiki/ICBM_address/ content in the document head which can be read by "iCab":http://www.icab.de/ and the Firefox "MiniMap":http://minimap.spatialviews.com/ extension, and allows linking from an article/image to a specific map point.

Author's functioning Map: "/ Map":http://spotthehall.com/map and site "tutorial":http://spotthehall.com/geoblogging/.

h3(sectionedit2#method). Method

Geodata information is entered into Textpattern _Custom Fields_ and is used in 3 ways:

# Extracted from your web pages, gathered in an _XML_ file, which then in turn serves up the goods to the map _javascript_. Data may also be entered directly into the XML file to provide non-linked markers and non-point specific area area links may also be constructed, all to a variable zoom level.
# Provides information for the article _map-link_, and
# the ICBM head meta content.

If present, url geodata is parsed out to create markers and position the map, otherwise a set of co-oordinates sets the initial map view.

Included is _Tooltip_ code for mouse-over marker titles and a _move end_ function relays the centre co-ordinates of the map.

The javascript code has been drawn together from the tutorials and code samples on the informative "Google API Concepts":http://code.google.com/apis/maps/documentation/index.html/ pages.

h3(sectionedit3#how_to). How To

Grab yourself an "API key":http://code.google.com/apis/maps/signup.html/ from Google, this will be valid for a single â€œdirectoryâ€? or domain and you have to have a Google Account.

h4(#setting-up_textpattern). Setting-up Textpattern

In Textpattern, set-up new:

* Map Page
* Map Style (probably required â€“ mine was different to the Default)
* Map Section â€“ using the Page and Style you have just set-up above

Insert the following in the head of your Map page, with the newly acquired _your API Key_

bc. <script type="text/javascript" src="http://www.google.com/jsapi?key=your API key"></script>


Create a div for the map using this line of HTML in the body of the page, the size and overall appearance can be governed by your new Map _Style_. Also added is a Message div for _move-end_ co-ordinates â€“ we will come on to that later.

bc. <div id="map"></div>
<div id="message"></div>


h4(#map_code). Map Code

Now copy "this script":http://spotthehall.com/files/gmap_script.txt (complete example text file from my site) and insert it into your Map Page immediately before the end body tag. This governs the map and includes tools for the following (I've included these extracts to make it easier for anyone to remove or edit any parts - carefully!):

* parse the latitude, longitude and zoom url information presented to the script.
** In line #21 (of the downloaded gmap_script.txt file) you may fix the variable zoom that the links show and not pass it in the url, to a level to suit you â€“ the alternative line is after OR in this code section - do NOT include both.
** Here we also set the lat/lng/zmn co-ordinates for the overall map view â€“ play with them to suit yourself â€“ they are all set to 1.

bc. var lat = parseFloat(url.lat);
var lng = parseFloat(url.lng);
var zmn = parseFloat(url.zmn); OR var zmn = 11;
var vars = url.vars;
}
else {
    var lat = 1;
    var lng = 1;
    var zmn = 1;
};


* provide for custom markers - line #55
** Custom Markers are described in groups with an end string which groups them by name. A group of three markers are shown below with the end string of three, just duplicate and change the name for more.
** Please note that at the moment it seems the first is ignored even when called with a â€œ0â€? in you _Custom Field_. Therefore â€œ1â€? actually corresponds to the second group â€“ thus the two markers actually used, correspond to the following icons and common shadow â€“ store them in your image file if you like:) "!/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?media=file:blue.png!":/home/www/zendstudio/dokuwiki/bin/lib/exe/detail.php?id=&media=file:blue.png "!/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?media=file:green.png!":/home/www/zendstudio/dokuwiki/bin/lib/exe/detail.php?id=&media=file:green.png "!/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?media=file:shadow.png!":/home/www/zendstudio/dokuwiki/bin/lib/exe/detail.php?id=&media=file:shadow.png

<pre class="code">
var markerIcon = new GIcon();
markerIcon.image = &quot;images/pin.png&quot;;
markerIcon.shadow = &quot;images/sh.png&quot;;
markerIcon.iconSize = new GSize(30, 50);
markerIcon.shadowSize = new GSize(30, 50);
markerIcon.iconAnchor = new GPoint(21, 50);
markerIcon.infoWindowAnchor = new GPoint(21, 15);

var blueIcon = new GIcon();
blueIcon.image = &quot;images/blue.png&quot;;
blueIcon.shadow = &quot;images/shadow.png&quot;;
blueIcon.iconSize = new GSize(12, 20);
blueIcon.shadowSize = new GSize(22, 20);
blueIcon.iconAnchor = new GPoint(6, 20);
blueIcon.infoWindowAnchor = new GPoint(5, 1);

var greenIcon = new GIcon();
greenIcon.image = &quot;images/green.png&quot;;
greenIcon.shadow = &quot;images/shadow.png&quot;;
greenIcon.iconSize = new GSize(12, 20);
greenIcon.shadowSize = new GSize(22, 20);
greenIcon.iconAnchor = new GPoint(6, 20);
greenIcon.infoWindowAnchor = new GPoint(5, 1);

var myIcon = [markerIcon,blueIcon,greenIcon];
</pre>

* show marker mouse-over tooltips
** this is integrated into the _create marker_ code - so be careful you don't break the overall code if you want to remove it

<pre class="code">
  function createMarker(point,name,html,icn) {
      var marker = new google.maps.Marker(point, myIcon[icn]);
      marker.tooltip = '&lt;div class=&quot;tooltip&quot;&gt;'+name+'&lt;/div&gt;';
      google.maps.Event.addListener(marker, &quot;click&quot;, function() {
        marker.openInfoWindowHtml(html);
      });
    gmarkers[i] = marker;
    htmls[i] = html;
        i++;
    map.addOverlay(marker);

        google.maps.Event.addListener(marker,&quot;mouseover&quot;, function() {
          showTooltip(marker);
        });        
        google.maps.Event.addListener(marker,&quot;mouseout&quot;, function() {
        tooltip.style.visibility=&quot;hidden&quot;
        });
    }

// sets-up tooltips on mouse-over

      function showTooltip(marker) {
        tooltip.innerHTML = marker.tooltip;
    var point=map.getCurrentMapType().getProjection().fromLatLngToPixel(map.fromDivPixelToLatLng(new google.maps.Point(0,0),true),map.getZoom());
    var offset=map.getCurrentMapType().getProjection().fromLatLngToPixel(marker.getPoint(),map.getZoom());
    var anchor=marker.getIcon().iconAnchor;
    var width=marker.getIcon().iconSize.width;
    var height=tooltip.clientHeight;
    var pos = new google.maps.ControlPosition(G_ANCHOR_TOP_LEFT, new google.maps.Size(offset.x - point.x - anchor.x + (width*1.3), offset.y - point.y -anchor.y -(height*.5))); 
    pos.apply(tooltip);
    tooltip.style.visibility=&quot;visible&quot;;
      }
</pre>

* &#42; Style your Tooltips in the map CSS file e.g:

bc. .tooltip {
    text-align:center;
    font-size:0.8em;
    white-space:nowrap;
    display:block;
    padding:2px;
    font-weight:bold;
    background:#333333;
        -webkit-border-radius:5px;
        -moz-border-radius:5px;
        -o-border-radius:5px;
        -khtml-border-radius:5px;
            -webkit-box-shadow: 2px 5px 6px #666666;
    color:#61C402;
}


* set the initial type of map presented and controls available
** There are options as to the type of map available and the controls on the map. It is set for initial display of the Physical Map, see line #117 and "Google Controls":http://code.google.com/apis/maps/documentation/controls.html/ for info on the controls available. The alternative to set initial view to the normal one you see in Google Map view is to replace PHYSICAL with NORMAL

bc.   map = new google.maps.Map2(document.getElementById("map"));
        map.setCenter(new google.maps.LatLng(lat,lng), zmn, G_PHYSICAL_MAP);
    map.addControl(new google.maps.LargeMapControl());
    map.addControl(new google.maps.HierarchicalMapTypeControl());
    map.addMapType(G_PHYSICAL_MAP);


* build the map using variables from your Custom Fields
** The main block of the code takes the variables and builds the map, please note the abbreviations (lat, lng, zmn, icn etc.) used in the code, as we will use the same ones in the Form and Custom Fields later.

* inserts popup information including zoom function
** Information gathered in the Marker Popup bubble is governed here (starting line #150) again note the abbreviations used later, but here is the article title (label) which links back to the post, an image and selected text from the Custom Fields (img and txt) and the built in zoom feature â€“ set the zoom levels to best suit you.

* describes the map centre as you move around
** Starting line #164 describes the listener that follows the centre of the map and displays the co-ordinates below the map in my example â€“ this is why the Message div was entered in the page body.

bc.         google.maps.Event.addListener (map, "moveend", function() {
          var center = map.getCenter();
          document.getElementById("message").innerHTML = center.toString();


h3(sectionedit4#making_it_work). Making it Work

Create a new Textpattern page called *Mapdata* and paste in the following. (Because Textpattern outputs itâ€™s content as text/html the standard code hs been changed to accept this, at line #128).

bc. <?xml version="1.0" encoding="ISO-8859-1" ?>
<markers>
<txp:article_custom form="mapdata" limit="999" />
</markers>


In Admin &gt; Preferences &gt; Advanced fill-in Custom Fields 1-6 with the abbreviations:

# lat
# long
# txt (anything you want in your map bubble - excerpt from article?)
# url (either return link from Map, or could link on to Wiki/Flickr/Picasa etc.)
# img (photo etc - will get resized to value set in Marker popup code)
# icn (number of marker icon (remember 0 is not working here)

In Presentation &gt; Forms create a new one called mapdata and save as Type: article with the following in:

bc. <txp:if_custom_field name="lat"> 
<marker lat="<txp:custom_field name="lat" />" lng="<txp:custom_field name="long" />" label="<txp:title />"
txt="<txp:custom_field name="txt" />" url="<txp:custom_field name="url" />" img="<txp:custom_field name="img" />" icn="<txp:custom_field name="icn" />">
</marker>
</txp:if_custom_field>


Now this will create the markers on your map, but to create a link from your page to a specific map point:

h4(#linking_article_to_map). Linking Article to Map

Add the following to your default article form.

(Included is the code for inserting a GeoTag icon "!/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?media=file:geotag.png!":/home/www/zendstudio/dokuwiki/bin/lib/exe/detail.php?id=&media=file:geotag.png, if you like you could add text to the link by including the tag for the txt Custom Field)

bc. <txp:if_custom_field name="lat"> 
<p><a href="<txp:site_url />map?lat=<txp:custom_field name="lat" />&lng=<txp:custom_field name="long" />&zmn=11"><img src="/images/geotag.png" alt="" border="0" title="map view" /></a></p>
</txp:if_custom_field>


If you used a fixed zoom level in your Map javascript code, then you should remove &lt;_yamdwe_nowiki&gt;0&lt;/_yamdwe_nowiki&gt; from the above. I have put the fixed level here to enable me to send links set at a point and zoom level (governed by the url) from a link within a page that bypasses the Custom Fields and hence the Article Form, to show an area without a marker â€“ "example":http://spotthehall.com/map?lat=54.665889404406479&lng=-1.96998596191406254&zmn=11/

If you want a variable zoom for every link, create another Custom Field for zmn and add the relevant &lt;_yamdwe_nowiki&gt;1&lt;/_yamdwe_nowiki&gt; tag to the Default Form.

h4(#meta_content). Meta Content

Finally - and the icing on this particular cake - to place the ICBM content in the document _head_, place the following in the head section of the Page â€“ which will probably be your blog page as this is designed to pick up the map co-ordinates of the page being viewed, not static geo info as from say an _About_ page:

bc. <txp:if_individual_article>
<txp:if_custom_field name="lat">
<meta name="ICBM" content="<txp:custom_field name="lat" />, <txp:custom_field name="long" />" />
</txp:if_custom_field>
</txp:if_individual_article>


There are a few sites on the net that will give you the co-ordinates for latitude and longitude (e.g. "Map Maker":http://mapmaker.donkeymagic.co.uk/ for me in the UK) â€“ when but when yours is up and running - you can estimate the centre co-ordinates with reasonably accuracy from your own.

h3(sectionedit5#future). Future

* Fixed cross-hairs in the centre - to aid ascertaining your own co-ordinates
* Polygons, et al.

