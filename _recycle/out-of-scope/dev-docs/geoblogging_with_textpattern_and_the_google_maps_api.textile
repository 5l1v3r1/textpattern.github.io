\n"mininav_tutorials":/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?id=&media=mininav_tutorials

h4(#overview). Overview

This is a Tutorial that demontrates, how to implement Geoblogging with Textpattern using the Google Maps API. Courtesy David Ramos. Please Note, that this material is copyrighted. Contact the Author for details: "Source David Ramos Google Maps in Textpattern":http://davidramos.org/thesis/google-maps-in-textpattern/.

This tutorial describes how to create a Google Maps â€œmashupâ€?1 that plots Textpattern articles as points on a map, like the one on the projects page.

h4(#what_you_will_need). What you will need

* lat and long custom fields associate each article with a particular point.

A Textpattern map section and map page template hold the map.

bc.    A JavaScript on the page draws the map, the controls, and the points. It pulls data from an XML file elsewhere on       the site.
*  A hidden mapdata section and mapdata form provide the XML data that the JavaScript uses.
Note that this is the method I used. There are simpler ways to do this. I wanted to create a map from an XML file.      You donâ€™t need to take that approach. You could create a JavaScript on the fly instead.


* Before you continue, it would help to take a quick look at the Google Maps API documentation and a good Google Maps API Tutorial, if you are new to Google Maps.

h4(#the_process). The Process

h5(#step_1get_a_google_maps_api_key). Step 1: Get a Google Maps API Key

Each website using Google Maps needs to get its own key from Google. You can do that by going to Google/Apis/Maps. This key will only work when the site is being accessed from the URL associated with the key.

h5(#step_2create_the_map_section). Step 2: Create the Map section

In Textpattern, create a new section called Map. Set this section so that it uses the page map. No articles go into this section â€“ itâ€™s just the place where we will access the map.

h5(#step_3create_the_map_page). Step 3: Create the Map Page

Create a new page called map. This is going to be the public face for the map. Lay out and style the page however you want.

Insert this line into the head, replacing my text with your Google Maps API Key:

bc. <script src="http://maps.google.com/maps?file=api&v=2&key=Paste_Your_Google_Maps_API_Key_here" type="text/javascript"></script>


Next we need to create a div that will hold the map. Insert this line of HTML into the page body. The width and height of this div will become the width and height of the map. It is essential that this div has a unique id:

bc. <div id="map" style="width: 600px; height: 450px;"></div>


You can only control the mapâ€™s position on the page and its size. Most of the map customization comes in the JavaScript, which we will deal with next.

h5(#step_4set_up_the_javascript). Step 4: Set up the JavaScript

Before we are finished with the map page, we need to insert a JavaScript that will actually draw the map. You can view "my modified script (opens in a new window)":http://davidramos.org/thesis/files/gmaps-in-txp.js.

I got this script from Mike Williams "Google Maps Tutorial":http://www.econym.demon.co.uk/googlemaps/basic3.htm, then modified it slightly so that it would work in Textpattern.2

You need to customize a few lines. First, look at lines 39 and 40:

bc. map.setCenter(new GLatLng(38.61687046392973,-95.2734375), 4);


Here you can specify the initial viewpoint of the map. The first figure is the latitude, and the second is the longitude. The whole-number value (4) is the starting zoom level, where 0 is zoomed all the way out and 17 is zoomed in.

Put this script at the end of the document, right before the &lt;/body&gt; tag. It cannot fall within a div or a table. Thatâ€™s it, weâ€™re finished with the map page template.

h5(#step_5test_your_map). Step 5: Test your map

In Textpattern, set the map section so that it uses the page map. If you go to YourSite.com/map, you should see a page with a Google Map. It will be empty, though. We still have to create another section, as a source for map data.

h5(#step_6create_the_mapdata_section). Step 6: Create the Mapdata section

Make another section, called mapdata. The JavaScript will pull its data from this section. The public will never need to view this section.

Create a page called mapdata. Paste this code into the page.

bc. <markers>
<txp:article_custom form="mapdata" limit="999" />
</markers>


On this page, Textpattern lists every article in the site, using the form mapdata. Textpattern will return a maximum of 999 articles.

Make an article form called mapdata. Paste this code into the form:

bc. <txp:if_custom_field name="lat"> 
<marker lat="<txp:custom_field name="lat" />" lng="<txp:custom_field name="long" />" label="<txp:title />">
    <infowindow><![CDATA[
    <p><txp:permlink><txp:title /></txp:permlink></p><txp:excerpt />
    ]]></infowindow>
</marker>
</txp:if_custom_field>


This code checks to see if the custom field lat contains data. If the field contains data, Textpattern will make a Google Map popup window for that article, containing a title, permalink, and excerpt.

Set the section mapdata to use the page mapdata.

h5(#step_7set_up_the_custom_fields). Step 7: Set up the custom fields

In Textpattern &gt; Admin &gt; Advanced Preferences, create two custom fields, lat and long. These will hold the latitude and longitude associated with each article. Now youâ€™re finished setting up Textpattern to display map data. All you have to do is associate each article with a location.

h5(#step_8geocode_your_articles). Step 8: Geocode your articles

You need to add the latitude and longitude of each article that you would like to place on the map. Use a Google Maps compatible geocoding tool like "Get_Lon_Lat":http://mapki.com/wiki/Get_Lon_Lat. Paste the latitude into the lat custom field, and the longitude into the long custom field or use a plugin such as "msd_google_map":http://textpattern.org/plugins/1084/msd_google_map.

Take another look at YourSite.com/map â€“ you should see pushpins for each of your geocoded articles. If you donâ€™t, try refreshing the map and mapdata sections in the browser. You may need to empty the browser cache.

h5(#further_possibilities). Further Possibilities

<ul>
<li><p>You can insert other code, like</p>
bc. <txp:excerpt />


<p>or the contents of custom fields, into the Google Map popups. Just stick it into the mapdata form alongside the title and permalink.</p></li>
<li>You should be able to figure out how to make these maps show only the posts under a particular category.</li>
<li>Thereâ€™s no reason you canâ€™t use some other JavaScript to create the map.</li>
<li>My method steps through each and every article in the site, looking for the custom field lat. For a site with many articles than mine, there is probably a more efficient approach.</li>
<li>I used an external XML file because it suited my site, and also out of sheer cussedness. You donâ€™t need to do it this way. Most Google Map mashups insert points that are defined within a custom JavaScript. Just ditch the XML file and generate a JavaScript on the fly. This should be simple for anyone who knows JavaScript reasonably well. (I donâ€™t.)</li>
<li>This map only has the concept of a â€œpoint.â€? Thatâ€™s pathetic. Points do not describe the world. Itâ€™s really nice to know about lines and polygons as well. It would be wonderful to associate clickable polylines with articles, instead of the idiotic pushpins that most â€œWhere 2.0â„¢â€? applications provide by default. (I outgrew pushpin mapping sometime around 4th grade.) I would be delighted if someone would figure out how to add polylines (or even polygons) in Google Maps + Textpattern. Iâ€™ll do it myself â€“ but it might take a while.</li>
<li>There are open-source, free-data mapping projects around. They promise a more sophisticated view of mapping than Google and its commercial friends are promoting. Iâ€™d welcome a way to use these alternative mapping APIs instead of Googleâ€™s. Iâ€™m following the progress of OpenLayers.</li>
</ul>

h4(#resources). Resources

"Author's Resource Page":http://davidramos.org/thesis/google-maps-in-textpattern

"Author's Implementation":http://davidramos.org/thesis/projects

"Google Map Api Documentation":http://www.google.com/apis/maps/documentation/

"Google Map Tutorial":http://www.econym.demon.co.uk/googlemaps/

"Google Maps Key Retrival":http://www.google.com/apis/maps/

"Author's modified Javascript to draw the Map":http://davidramos.org/thesis/files/gmaps-in-txp.js

"Get_Lon_Lat Geo-Coding Tool":http://mapki.com/wiki/Get_Lon_Lat/

