\n"stop":/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?id=&media=stop

Content has been merged with "parsing_tag_attributes":/home/www/zendstudio/dokuwiki/bin/doku.php?id=parsing_tag_attributes

<hr />

Most TXP tags allow you to specify attributes as key/value pairs to override default behaviour.

Examples:

bc. <txp:tag key="value" />


bc. <txp:category type="image" title="1" />


Usage of attributes in TXP tags is similar to attributes in XHTML.

A few important rules to remember:

* attribute values must always be delimited by double (or single) quotes. Single quotes have special meaning, so use double quotes by default.
* attribute keys must be lower case.
* for plugin developers: attribute keys can consist of the letters 'a' through 'z' and underscore (not as the first or last character).

h3(sectionedit1#attribute_value_escaping). Attribute value escaping

Almost any character can be used in an attribute value. Unlike in XHTML, there is no need for using escape codes for characters like

bc. >


,

bc. <


and

bc. &


. In fact, attribute values should contain no XHTML escape codes at all, because the TXP tag itself should take care of proper escaping.

However, there is one exception: the delimiter character.

The attribute value is delimited by a pair of double (or single) quotes and this poses a restriction on using the delimiter character inside the attribute value.

Suppose you wanted to use this as an attribute value: *reward for “good” behaviour*:

*incorrect*:

bc. <txp:tag key="reward for "good" behaviour" />


For a human, it's easy to understand how this was intended, but for Textpattern the attribute value ends at the double quote before 'good'. The remainder of the attribute value makes it an incorrectly formatted tag (causing to show up as-is in the resulting HTML code).

If single quotes didn't have special meaning, one would solve this by using single quotes to delimit the attribute value:

bc. <txp:tag key='reward for "good" behaviour' />


While this works as intended, it doesn't account for attribute values containing both single and double quotes.

Since TXP 4.0.7, duplicate delimiter characters used as part of an attribute value are interpreted as a literal character instead of delimiters. A few examples:

bc. <txp:tag key="reward for ""good"" behaviour" />


bc. <nowiki><txp:tag key='reward for ''good'' behaviour' /></nowiki>


If you look closely at the second example, you'll see that in the attribute value, there are two single quotes on each side of the word 'good', not a double quote.

One last example that shows what's possible:

bc. <txp:tag key="let's use ""double"" quotes & <html> here" />


The only character that needs escaping is the chosen attribute delimiter itself where it occurs inside the attribute value (double quote in this instance).

NOTE: In TXP 4.0.6 and older, delimiter escaping did not exist and the tag parser also failed to handle attribute values containing a

bc. >


.

h3(sectionedit2#parsed_attribute_values). Parsed attribute values

Before reading this part, first make sure you completely understand all the previous documentation about attributes. What follows is not for the faint of heart.

As stated earlier, there's a difference between using double and single quotes as the attribute delimiter.

In most cases, you want attribute values to be treated as just a string of text, but there are situations where it can be useful to parse the attribute value itself. This occurs only for single quoted attribute values.

Double quoted attribute values are not parsed, so if your attribute value contains a value that looks like a TXP tag, but should be treated as literal text, you must always use double quotes. In fact, you should use double quotes to delimit attribute values at all times, unless you want the attribute value parsed. The reason for this is simple: speed. Parsing an attribute value is slower than treating it as plain text.

What does this all mean? Well, letâ€™s give a few examples, starting with attribute values that are not parsed:

bc. <txp:tag key="plain text" />


bc. <txp:tag key="literal <txp:tag />" />


In the above examples, the attribute are treated as plain text; the literal TXP tag is not parsed. If you wanted the TXP tag in the attribute value to be parsed, you should write it like this:

bc. <txp:tag key='parsed <txp:tag />' />


Letâ€™s take a real-world example, using an article that has a custom field named â€˜my_emailâ€™ containing an email address me&#64;example.com and a custom field â€˜my_nameâ€™ containing the name 'Dean Allen':

bc. <txp:email
  email='<txp:custom_field name="my_email" />'
  linktext="Send email"
  title='Send email to <txp:custom_field name="my_name" />'
/>


Because the single quoted attribute values are parsed, after parsing the attribute values, it looks like this:

bc. <txp:email 
  email="me@example.com" 
  linktext="Send email"
  title="Send email to Dean Allen"
/>


If it were just one article, you wouldnâ€™t need attribute parsing, but if you have many articles with different email addresses in such a â€˜my_emailâ€™ custom field, this can be very useful.

Attribute value parsing has no real limitations. Within a parsed attribute value, you can:

* have an unlimited number TXP tags.
* mix plain text with TXP tags.
* use container tags (yes, even &lt;txp:php&gt;), self-closing tags and if/else constructs.
* only for die-hard users: even the attributes of tags inside an attribute can be parsed to unlimited depth, provided you use proper attribute value quoting and escaping. Now if only someone could find a practical use for thisâ€¦

NOTE: in TXP 4.0.6 and older, attribute values were never parsed. Single and double quoted attribute values were both treated as literal text.

