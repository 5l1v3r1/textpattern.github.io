\n"mininav_tutorials":/home/www/zendstudio/dokuwiki/bin/lib/exe/fetch.php?id=&media=mininav_tutorials

Although it is not officially supported running Textpattern on an nginx webserver works just fine, given the correct configuration. This article outlines the requirements for a successful installation of Textpattern using nginx on a CentOS 5.6 system.

h3(sectionedit1#acquisition_and_unpacking). Acquisition and Unpacking

h4(#nginx_and_php-fpm). nginx and php-fpm

In order to run any PHP application on nginx you will have to have PHP-FPM available and running on your system. It is part of the core since PHP 5.3.3. For previous versions you might need to compile it yourself.

To ease the installation you can use pre-built packages in the "EPEL":http://fedoraproject.org/wiki/EPEL, "Remi":http://rpms.famillecollet.com/, or "CENTALT":http://centos.alt.ru/repository/centos/readme.txt repositories.

You need to have nginx as well as php-fpm running. If you installed them via yum you will most likely be able to simply configure them to start at boot time using

chkconfig nginx on chkconfig php-fpm on

h4(#textpattern). Textpattern

# "Download":http://textpattern.com/download/ the latest release package from the Textpattern (tested with 4.4.1 but any version should work just fine). Select either _.gzip_ or _.zip_ as you prefer.
# It is assumed that the unzipped contents of the file are available in /var/www/html/textpattern

h3(sectionedit2#set_up_nginx). Set up nginx

There are several configuration files for nginx (path names may vary between linux distributions). The ones that may need adjustments are the following:

*_/etc/nginx/nginx.conf_*
 Main configuration, similar to httpd.conf for Apache. *_/etc/nginx/conf.d/&#42;.conf_*
 Additional configuration files (everything with a suffix of .conf), those will also be used for the virtual host configuration. *_/etc/nginx/fastcgi_params_*
 fastcgi settings

h4(#etc_nginx_nginxconf). /etc/nginx/nginx.conf

This is what an example _nginx.conf_ could look like:

<pre class="code">
user  nginx;
worker_processes  2;
worker_rlimit_nofile 100000;

error_log   /var/log/nginx/error.log;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                      '$status $body_bytes_sent &quot;$http_referer&quot; '
                      '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    server_tokens   off;
    gzip            on;
    gzip_static     on;
    gzip_comp_level 5;
    gzip_min_length 1024;
    keepalive_timeout  65;
    limit_zone   myzone  $binary_remote_addr  10m;

    # Load config files from the /etc/nginx/conf.d directory
    include /etc/nginx/conf.d/*.conf;

    server {
        limit_conn   myzone  10;
        listen       80;
        server_name  _;

        location / {
        root /usr/share/nginx/html;
            index  index.html index.php index.htm;
        }
      location ~ \.php$ {
      # Security: must set cgi.fixpathinfo to 0 in php.ini!
      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      fastcgi_pass 127.0.0.1:9000;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME         $document_root$fastcgi_script_name;
      fastcgi_param PATH_INFO $fastcgi_path_info;
      include /etc/nginx/fastcgi_params;
   }

        error_page  404              /404.html;

        location = /404.html {
            root   /usr/share/nginx/html;
        }

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

    }
}
</pre>

h4(#etc_nginx_confd_exampleconconf). /etc/nginx/conf.d/example.con.conf

For each virtual host (i.e. each URL under which your Textpattern site should be accessible) you need to define one _server_ block. It is good practice to create one file per domain so you can better keep track of all settings. Since nginx does not make use of _.htaccess_ files or offers _mod_rewrite_, so you need to use an alternative approach to allow clean URLs. The _try_files_ directive is responsible for clean URLs in this example.

<pre class="code">
server {
  listen 80;  #could also be 1.2.3.4:80
  
  # adjust this as required
  server_name example.com; 
 
  root /var/www/html/textpattern;
 
  error_page 404 /usr/share/nginx/errors/404.html;
  access_log /var/log/nginx/example.com.access.log main;
 
  index index.php index.html index.htm;
 
  # the following line is responsible for clean URLs
  try_files $uri $uri/ /index.php?$args;

  # serve static files directly
  location ~* \.(jpg|jpeg|gif|css|png|js|ico|html)$ {
    access_log off;
    expires max;
  }
 
  location ~ \.php$ {
      # Security: must set cgi.fixpathinfo to 0 in php.ini!
      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      fastcgi_pass 127.0.0.1:9000;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME         $document_root$fastcgi_script_name;
      fastcgi_param PATH_INFO $fastcgi_path_info;
      include /etc/nginx/fastcgi_params;
  }
 
  location ~ /\.ht {
    deny  all;
  }
}
</pre>

h4(#etc_nginx_fastcgi_params). /etc/nginx/fastcgi_params

These are example settings for _fastcgi_params_:

<pre class="code">
fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;

fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
fastcgi_param  REQUEST_URI        $request_uri;
fastcgi_param  DOCUMENT_URI       $document_uri;
fastcgi_param  DOCUMENT_ROOT      $document_root;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;

fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  REMOTE_PORT        $remote_port;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;

# PHP only, required if PHP was built with --enable-force-cgi-redirect
fastcgi_param  REDIRECT_STATUS    200;
</pre>

