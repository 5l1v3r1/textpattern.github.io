\n

bc(code). register_callback()


is at the core of using callbacks. The full function definition looks like this:

bc(code). function register_callback($func, $event, $step=<__yamdwe_nowiki>0</__yamdwe_nowiki>, $pre=0)


<ul>
<li>bc(code). $func


<p>- the name of the function you coded and want to add to a callback-event</p></li>
<li>bc(code). $event


<p>- name of the (Textpattern-provided) event with which you want to associate your plugin</p></li>
<li>bc(code). $step


<p>- (Optional). On the admin-side $events are (disjunctively) divided into steps. For admin-side plugin you have the choice of narrowing your plugin to a specific step</p></li>
<li>bc(code). $pre


<p>- (Optional). Again only for the admin-side. If this is set to 1,</p>
bc(code). $func


<p>is called before any part of the page is rendered or executed - this allows you to “replace ” existing tabs on the admin-side. By default however</p>
bc(code). $func


<p>is called after the main part of the page is executed and rendered. Allowing your function to add things below it (or go for manipulating the DOM)</p></li>
</ul>

h3(sectionedit1#public-side_callback_events). Public-side Callback Events

* comment.save - gets called after the nonce check passed, but before a plugin is saved.
* comment.form - gets called before a comment form is rendered and allows to add to it.

Both of the above are mainly useful for comments and spam-related plugins (see [Combat Comment Spam])

* pretext - gets called at the beginning of pretext()
* textpattern - gets called at the beginning of textpattern()

Both of these are useful if you want to introduce your own uri-schemas; say if you decided to write an archive plugin and wanted to prevent the the url “site.com/section/archive/” returning a 404.

h3(sectionedit2#admin-side_callback_events). Admin-side Callback Events

Callback-Events on the admin-side are easy to recognize in the address bar of your browser. If you click on any tab, you'll see that the url will contain “?event=something” and if you click further eventually “?event=something&amp;step=anotherthing”. Those values correspond to the events and steps you can use for your plugins. And in fact they will call any user-defined function that is registered for said event/step, allowing you to add your own events and steps as you need them.

h3(sectionedit3#pluggable_ui_callback_events). pluggable&#95;ui() Callback Events

A special type of callback introduced in Textpattern 4.2.0 is pluggable&#95;ui(). This is used throughout the core to allow plugin authors to redesign or alter the layout of the admin side.

*IMPORTANT*: although it is possible to completely redesign the HTML markup within the page, it is advisable to refrain from this action. For example, by removing

bc(code). <nowiki><input id="article_image"></nowiki>


from the Write tab, you may render Textpattern (and plugins that rely on the existence of such a DOM element) inoperative. If you must rename element IDs/classes, consider leaving the existing items intact, adding your own and then setting the originals to

bc(code). display:none


via CSS

The callback's

bc(code). event


usually ends in

bc(code). _ui


and begins with the event to which it refers. For example, on the Write tab the events are

bc(code). article_ui


and on the Files tab, the events are

bc(code). file_ui


.

The

bc(code). step


is usually the part of the page that contains the element you wish to change. For example, on the Write tab, the article image control has a step called

bc(code). article_image


and the custom fields area is called

bc(code). custom_fields


, and so on.

When writing your own functions using the pluggable&#95;ui() callbacks, note they have a different function signature from regular callbacks. They usually have 4 parameters:

# event
# step
# default content (the markup that is used if you don't modify it)
# record set, if applicable (the records returned from the database that pertain to this event, e.g. on the Write tab this would be one row containing the columns from the currently edited article)

Sometimes (for example when dealing with preference settings) the 4th argument becomes the preference name and a 5th argument holds its value.

Please consult the "core&#95;callback&#95;list":/home/www/zendstudio/dokuwiki/bin/doku.php?id=core_callback_list for detailed information on all the callbacks available within Textpattern.

